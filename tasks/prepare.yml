---

- name: include OS specific configuration ({{ ansible_distribution }} ({{ ansible_os_family }}) {{ ansible_distribution_major_version }})
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      paths:
        - "vars"
      files:
        # eg. debian-10 / ubuntu-20.04 / centos-8 / oraclelinux-8
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yml"
        # eg. archlinux-systemd / archlinux-openrc
        - "{{ ansible_distribution | lower }}-{{ ansible_service_mgr | lower }}.yml"
        # eg. debian / ubuntu / centos / oraclelinux
        - "{{ ansible_distribution | lower }}.yml"
        # eg. redhat / debian / archlinux
        - "{{ ansible_os_family | lower }}.yml"
        # artixlinux
        - "{{ ansible_os_family | lower | replace(' ', '') }}.yml"
        - default.yaml
      skip: true

- name: update package cache
  package:
    update_cache: true

- name: define delegate instance for download handling
  set_fact:
    prometheus_delegate_to: "{{ ansible_host }}"
    prometheus_local_tmp_directory: "{{
        lookup('env', 'CUSTOM_LOCAL_TMP_DIRECTORY') |
        default('/var/cache/ansible/prometheus', true) }}/{{ prometheus_version }}"
  when:
    - prometheus_direct_download

- name: install dependency
  package:
    name: "{{ prometheus_requirements }}"
    state: present
  when:
    - prometheus_requirements | default([]) | count > 0

- block:
    - name: get latest release
      uri:
        url: "https://api.github.com/repos/prometheus/prometheus/releases/latest"
        method: GET
        return_content: true
        status_code: 200
        body_format: json
        validate_certs: false
        user: "{{ lookup('env', 'GH_USER') | default(omit) }}"
        password: "{{ lookup('env', 'GH_TOKEN') | default(omit) }}"
      # no_log: "{{ not lookup('env', 'ANSIBLE_DEBUG') | bool }}"
      register: _latest_release
      until: _latest_release.status == 200
      retries: 5

    - name: set prometheus version to {{ _latest_release.json.tag_name[1:] }}
      set_fact:
        prometheus_version: "{{ _latest_release.json.tag_name[1:] }}"
  when:
    - prometheus_version == "latest"

- name: detect our installation path '{{ prometheus_install_path | dirname }}'
  stat:
    path: "{{ prometheus_install_path | dirname }}"
    get_checksum: false
  register: stat_prometheus_path
  ignore_errors: true

- name: old installation
  block:
    - name: stop old service
      service:
        name: prometheus
        state: stopped
        enabled: false
      notify:
        - daemon-reload

    - name: remove installed systemd unit
      file:
        state: absent
        path: /etc/systemd/system/prometheus.service
      when:
        - ansible_service_mgr | lower == "systemd"

    - name: remove installed prometheus
      file:
        state: absent
        path: "{{ stat_prometheus_path.stat.path }}"
  when:
    - stat_prometheus_path is defined
    - stat_prometheus_path.stat is defined
    - stat_prometheus_path.stat.isdir is defined
    - not stat_prometheus_path.stat.isdir

- name: flush handlers
  meta: flush_handlers

- name: detect installed prometheus binary
  stat:
    path: "{{ prometheus_install_path }}/prometheus"
  register: stat_prometheus_binary

- name: create download directory
  become: false
  delegate_to: "{{ prometheus_delegate_to }}"
  file:
    path: "{{ prometheus_local_tmp_directory }}"
    state: directory
    mode: 0750

- name: user and group handling
  block:
    - name: create prometheus group
      group:
        name: "{{ prometheus_system_group }}"
        state: present
        system: true

    - name: create prometheus user
      user:
        name: "{{ prometheus_system_user }}"
        groups: "{{ prometheus_system_group }}"
        append: true
        shell: /usr/sbin/nologin
        system: true
        createhome: false
        home: /nonexistent
  when:
    - prometheus_system_user != "root"

- name: create install directory
  file:
    path: "{{ prometheus_install_path }}"
    state: directory
    owner: "{{ prometheus_system_user }}"
    group: "{{ prometheus_system_group }}"
    mode: 0755

- name: fix directory rights for {{ prometheus_install_path | dirname }}
  file:
    path: "{{ prometheus_install_path | dirname }}"
    state: directory
    owner: "{{ prometheus_system_user }}"
    group: "{{ prometheus_system_group }}"
    mode: 0755
    recurse: true

- name: create ansible local facts directory
  file:
    dest: /etc/ansible/facts.d
    state: directory
    owner: root
    group: root
    mode: 0775

- name: merge prometheus configuration between defaults and custom
  set_fact:
    prometheus_service: "{{ prometheus_defaults_service | combine( prometheus_service, recursive=True) }}"
    prometheus_global: "{{ prometheus_defaults_global | combine( prometheus_global, recursive=True) }}"
    prometheus_alerting: "{{ prometheus_defaults_alerting | combine( prometheus_alerting, recursive=True ) }}"
    prometheus_remote_write: "{{ prometheus_defaults_remote_write | combine( prometheus_remote_write, recursive=True ) }}"
    prometheus_remote_read: "{{ prometheus_defaults_remote_read | combine( prometheus_remote_read, recursive=True ) }}"
    prometheus_storage: "{{ prometheus_defaults_storage | combine( prometheus_storage, recursive=True ) }}"
    prometheus_tracing: "{{ prometheus_defaults_tracing | combine( prometheus_tracing, recursive=True ) }}"
    prometheus_rule_files: "{{ prometheus_defaults_rule_files | union( prometheus_rule_files ) }}"
    prometheus_scrape_configs: "{{ prometheus_defaults_scrape_configs | union( prometheus_scrape_configs ) }}"

# -----------

- name: validate file_sd config in prometheus_scrape_configs
  set_fact:
    missing_target_definition: "{{ prometheus_scrape_configs | validate_file_sd(prometheus_file_sd_targets) }}"

- name: Fail when file_sd targets are not defined in prometheus_scrape_configs
  fail:
    msg: "For the following files a definition in prometheus_file_sd_targets is missing:\n
      {{ missing_target_definition | join('\n') }}"
  when:
    - missing_target_definition is defined
    - missing_target_definition | count > 0

...
