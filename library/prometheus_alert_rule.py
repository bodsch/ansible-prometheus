#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# (c) 2022, Bodo Schulz <bodo@boone-schulz.de>
# BSD 2-clause (see LICENSE or https://opensource.org/licenses/BSD-2-Clause)

from __future__ import absolute_import, division, print_function
import os
import hashlib
import json

from pathlib import Path

from ansible.module_utils.basic import AnsibleModule


class PrometheusAlertRule(object):
    """
    """
    def __init__(self, module):
        """
        """
        self.module = module

        self.rules_directory = module.params.get("rules_directory")
        self.name = module.params.get("name")
        self.for = module.params.get("for")
        self.expression = module.params.get("expression")
        self.labels = module.params.get("labels")
        self.annotations = module.params.get("annotations")

        self.checksum_directory = f"{Path.home()}/.ansible/cache/prometheus_alert_rules"


    def run(self):
        """
        """
        result = dict(
            changed=False,
            failed=True,
            msg="initial"
        )

        properties = (
          for=self.for,
          expression=self.expression,
          labels=self.labels,
          annotations=self.annotations
        )

        self.__create_directory(self.checksum_directory)

        if self.state == "present":
            e = self._write_rule(self.name, properties)

        if self.state == "absent":
            e = self._delete_rule(self.name)

        self.module.log(msg=f" - e '{e}'")

        return result


    def _write_rule(self, name, properties = {}):
        """
        """
        if len(properties) == 0:
            return False

        data_file     = os.path.join(self.rules_directory, name, f"{name}.rules")
        checksum_file = os.path.join(self.checksum_directory, name, f"{name}.rules.checksum")

        return self.__write_file(properties, "properties", data_file, checksum_file)

    def _delete_rule(self, name):
        """
        """
        data_file     = os.path.join(self.rules_directory, name, f"{name}.rules")
        checksum_file = os.path.join(self.checksum_directory, name, f"{name}.rules.checksum")

        pass

    def __write_file(self, data, env, data_file, checksum_file):
        """
        """
        _old_checksum = ""

        if os.path.exists(checksum_file):
            with open(checksum_file, "r") as f:
                _old_checksum = f.readlines()[0]

        data = self.__template(data, env)
        checksum = self.__checksum(data)

        data_up2date = (_old_checksum == checksum)

        # self.module.log(msg=" - new  checksum '{}'".format(checksum))
        # self.module.log(msg=" - curr checksum '{}'".format(_old_checksum))
        # self.module.log(msg=" - up2date       '{}'".format(data_up2date))

        if data_up2date:
            return False

        with open(data_file, "w") as f:
            f.write(data)

            with open(checksum_file, "w") as f:
                f.write(checksum)

        return True

    def __checksum(self, plaintext):
        """
        """
        if isinstance(plaintext, dict):
            password_bytes = json.dumps(plaintext, sort_keys=True).encode('utf-8')
        else:
            password_bytes = plaintext.encode('utf-8')

        password_hash = hashlib.sha256(password_bytes)
        return password_hash.hexdigest()

    def __template(self, data, env):
        """
          generate data from dictionary
        """
        tpl = """
# generated by ansible
groups:
- name: ansible managed alert rules
  rules:
{%- for key, value in item.items() %}
{{ key.ljust(30) }} = {{ value }}
{%- endfor %}

"""

        from jinja2 import Template

        tm = Template(tpl)
        d = tm.render(item=data)

        return d

    def __create_directory(self, dir):
        """
        """
        try:
            os.makedirs(dir, exist_ok=True)
        except FileExistsError:
            pass

        if os.path.isdir(dir):
            return True
        else:
            return False


# ===========================================
# Module execution.


def main():
    """
    """
    module = AnsibleModule(
        argument_spec=dict(
            state=dict(
                default="present", choices=["absent", "present"]
            ),
            name = dict(
                required=True,
                type='str'
            ),
            # rules=dict(
            #     required=False,
            #     type='list'
            # ),
            alert=dict(
                required=True,
                type="str"
            ),
            for=dict(
                required=True,
                type="str"
            ),
            expr=dict(
                required=True,
                type="str"
            ),
            labels=dict(
                required=False,
                type="dict"
            ),
            annotations=dict(
                required=False,
                type="dict"
            ),
            rules_directory = dict(
                required=False,
                type='path',
                default="/etc/prometheus/rules"
            ),
        ),
        supports_check_mode=True,
    )

    p = PrometheusAlertRule(module)
    result = p.run()

    # module.log(msg="= result: {}".format(result))
    module.exit_json(**result)


if __name__ == '__main__':
    main()
